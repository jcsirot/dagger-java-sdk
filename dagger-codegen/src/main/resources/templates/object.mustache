// Code generated by dagger-java-sdk. DO NOT EDIT.
package {{ packageName }}

import java.util.List;
{{#isScalar}}import io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClient;{{/isScalar}}

/**
 * {{ classDescription }}
 */
public class {{ className }}{{#isArgument}} implements Argument{{/isArgument}} {

    private QueryContext context;

{{#scalarFields}}
    private {{ fieldType }} {{ fieldName }};
{{/scalarFields}}

{{#isClientClass}}
    public {{ className }}(DynamicGraphQLClient graphQLClient) {
        this.context = new QueryContext(graphQLClient);
    }

{{/isClientClass}}
    /** Empty constructor for JSON-B deserialization */
    {{ className }}() {}

    {{ className }}(QueryContext context) {
        this.context = context;
    }

{{#scalarFields}}
    void {{setter}}({{ fieldType }} {{ fieldName }}) {
        this.{{ fieldName }} = {{ fieldName }};
    }

{{/scalarFields}}

{{#fields}}
    /**
     * <p>{{ fieldDescription }}</p>
     *
    {{#args}}
     * @param {{ argName }} {{ argDescription }}
    {{/args}}
     */
    public {{ returnType }} {{ fieldName }}({{#args}}{{ argType }} {{argName}}{{^-last}}, {{/-last}}{{/args}}) {
        {{#isScalar}}
        if ({{ fieldName }} != null) {
            return {{ fieldName }};
        }
        {{/isScalar}}
        // QueryContext ctx = context.append(new QueryPart("{{ fieldName }}"));
        {{#continueChaining}}
        QueryContext ctx = context.chain(new QueryPart("{{ fieldName }}"));
        return new {{ returnType }}(ctx);
        {{/continueChaining}}
        {{#scalar}}
        return context.chain(new QueryPart("{{ fieldName }}")).executeQuery({{ returnType }}.class);
        {{/scalar}}
        // return ...
    }
{{/fields}}

{{#isArgument}}
    public String serialize() {
        return this.id().convert();
    }
{{/isArgument}}
}
