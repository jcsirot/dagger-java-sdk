// Code generated by dagger-java-sdk. DO NOT EDIT.
package {{ packageName }}

import java.util.List;
{{#isScalar}}import io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClient;{{/isScalar}}

/**
 * {{ classDescription }}
 */
public class {{ className }}{{#isArgument}} implements ArgValue{{/isArgument}} {

    private QueryContext queryContext;

{{#scalarFields}}
    private {{ fieldType }} {{ fieldName }};
{{/scalarFields}}

{{#isClientClass}}
    public {{ className }}(DynamicGraphQLClient graphQLClient) {
        this.queryContext = new QueryContext(graphQLClient);
    }

{{/isClientClass}}
    /** Empty constructor for JSON-B deserialization */
    {{ className }}() {}

    {{ className }}(QueryContext queryContext) {
        this.queryContext = queryContext;
    }

{{#scalarFields}}
    void {{setter}}({{ fieldType }} {{ fieldName }}) {
        this.{{ fieldName }} = {{ fieldName }};
    }

{{/scalarFields}}

{{#fields}}
    {{#hasOptionalArguments}}
    public static class {{ fieldAsClassName }}Arguments {
        {{#optionalArgs}}
        {{ argType }} {{ argName }};
        {{/optionalArgs}}

        private {{ fieldAsClassName }}Arguments() {}

        public static {{ fieldAsClassName }}ArgumentsBuilder newBuilder() {
            {{ fieldAsClassName }}Arguments args = new {{ fieldAsClassName }}Arguments();
            return new {{ fieldAsClassName }}ArgumentsBuilder(args);
        }

        public Map<String, ArgValue> toArguments() {
            HashMap<String, ArgValue> map = new HashMap<>();
            {{#optionalArgs}}
            map.put("{{ argName }}", ArgValue.arg(this.{{ argName }}));
            {{/optionalArgs}}
            return map;
        }
    }

    public static class {{ fieldAsClassName }}ArgumentsBuilder {
        private {{ fieldAsClassName }}Arguments arguments;

        {{ fieldAsClassName }}ArgumentsBuilder({{ fieldAsClassName }}Arguments arguments) {
            this.arguments = arguments;
        }

        {{#optionalArgs}}
        public {{ fieldAsClassName }}ArgumentsBuilder with{{ argNameCapitalized }}({{ argType }} {{ argName }}) {
            arguments.{{ argName }} = {{ argName }};
        }
        {{/optionalArgs}}

        public {{ fieldAsClassName }}Arguments build() {
            return this.arguments;
        }
    }
    {{/hasOptionalArguments}}

    /**
     * <p>{{ fieldDescription }}</p>
     *
    {{#mandatoryArgs}}
     * @param {{ argName }} {{ argDescription }}
    {{/mandatoryArgs}}
    {{#hasOptionalArguments}}
     * @param optArgs optional arguments. See {@link {{ packageName }}.{{ fieldAsClassName }}Arguments {{ fieldAsClassName }}Arguments}
    {{/hasOptionalArguments}}
     */
    public {{ returnType }} {{ fieldName }}({{#mandatoryArgs}}{{ argType }} {{argName}}{{^-last}}, {{/-last}}{{#hasMandatoryArguments}}, {{/hasMandatoryArguments}}{{/mandatoryArgs}}{{#hasOptionalArguments}}{{ fieldAsClassName }}Arguments optArgs{{/hasOptionalArguments}}) {
        {{#isScalar}}
        if ({{ fieldName }} != null) {
            return {{ fieldName }};
        }
        {{/isScalar}}
        {{#hasArguments}}
        Map<String, ArgValue> argMap = new HashMap<>();
        {{/hasArguments}}
        {{#mandatoryArgs}}
        argMap.put("{{argName}}", arg({{argName}}));
        {{/mandatoryArgs}}
        {{#hasOptionalArguments}}
        argMap.putAll(optArgs.toArguments());
        {{/hasOptionalArguments}}
        QueryContext ctx = queryContext.chain(new QueryPart("{{ fieldName }}"{{#hasArguments}}, argMap{{/hasArguments}}));
        {{#continueChaining}}
        return new {{ returnType }}(ctx);
        {{/continueChaining}}
        {{#executeQuery}}
        {{ returnType }} r;
        {{#returnList}}
        r = ctx.executeListQuery({{ returnListElementType }}.class);
        {{/returnList}}
        {{#notReturnList}}
        r = ctx.executeQuery({{ returnType }}.class);
        {{/notReturnList}}
        {{#isIdType}}
        r = this;
        {{/isIdType}}
        return r;
        {{/executeQuery}}
    }
{{/fields}}

{{#isArgument}}
    public String serialize() {
        return this.id().convert();
    }
{{/isArgument}}
}
