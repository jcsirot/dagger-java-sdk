package org.chelonix.dagger.codegen.introspection;

import com.samskivert.mustache.Mustache;
import com.samskivert.mustache.Template;
import com.squareup.javapoet.*;

import javax.lang.model.element.Modifier;
import java.io.IOException;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

class InputVisitor {
    static void visit(Type type, Function<String, Writer> writerProvider) {
        try (Writer writer = writerProvider.apply(String.format("org/chelonix/dagger/client/%s.java", type.getName())))
        {
            TypeSpec.Builder classBuilder = TypeSpec.classBuilder(Helpers.formatTypeName(type))
                    .addJavadoc(type.getDescription())
                    .addModifiers(Modifier.PUBLIC)
                    .addSuperinterface(ClassName.bestGuess("InputValue"));

            for (InputValue inputValue: type.getInputFields()) {

                classBuilder.addField(FieldSpec.builder(
                        inputValue.getType().formatInput(),
                        inputValue.getName(),
                        Modifier.PRIVATE).build());

                classBuilder.addMethod(Helpers.getter(inputValue.getName(), inputValue.getType().formatInput()));
                classBuilder.addMethod(Helpers.setter(inputValue.getName(), inputValue.getType().formatOutput()));
            }

            MethodSpec.Builder toMapMethod = MethodSpec.methodBuilder("toMap")
                    .addModifiers(Modifier.PUBLIC)
                    .addAnnotation(Override.class)
                    .returns(ParameterizedTypeName.get(Map.class, String.class, Object.class))
                    .addStatement("$1T map = new $1T()", ParameterizedTypeName.get(
                            HashMap.class, String.class, Object.class));
            for (InputValue inputValue: type.getInputFields()) {
                toMapMethod.addStatement("map.put(\"$1L\", this.$1L)", inputValue.getName());
            }
            toMapMethod.addStatement("return map");
            classBuilder.addMethod(toMapMethod.build());

            JavaFile javaFile = JavaFile.builder("org.chelonix.dagger.client", classBuilder.build())
                    .build();
            writer.write("// This class has been generated by dagger-java-sdk. DO NOT EDIT.\n");
            javaFile.writeTo(writer);
            //javaFile.writeTo(System.out);
        } catch (IOException ioe) {
            throw new RuntimeException(ioe);
        }
    }
}
