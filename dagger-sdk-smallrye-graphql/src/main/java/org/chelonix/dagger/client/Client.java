// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package org.chelonix.dagger.client;

import io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClient;
import java.lang.Boolean;
import java.lang.InterruptedException;
import java.lang.String;
import java.util.List;
import java.util.concurrent.ExecutionException;

public class Client {
  private QueryContext queryContext;

  public Client(DynamicGraphQLClient graphQLClient) {
    this.queryContext = new QueryContext(graphQLClient);
  }

  Client(QueryContext queryContext) {
    this.queryContext = queryContext;
  }

  /**
   * <p>Constructs a cache volume for a given cache key.</p>
   * @param key A string identifier to target this cache volume (e.g., "modules-cache").
   */
  public CacheVolume cacheVolume(String key) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("key", key);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("cacheVolume", fieldArgs);
    return new CacheVolume(ctx);
  }

  /**
   * <p>Loads a container from ID.<br/><br/>Null ID returns an empty container (scratch).<br/>Optional platform argument initializes new containers to execute and publish as that platform.<br/>Platform defaults to that of the builder's host.</p>
   */
  public Container container(ContainerArguments optArgs) {
    Arguments.Builder builder = Arguments.newBuilder();
    Arguments fieldArgs = builder.build();
    fieldArgs = fieldArgs.merge(optArgs.toArguments());
    QueryContext ctx = this.queryContext.chain("container", fieldArgs);
    return new Container(ctx);
  }

  /**
   * <p>Loads a container from ID.<br/><br/>Null ID returns an empty container (scratch).<br/>Optional platform argument initializes new containers to execute and publish as that platform.<br/>Platform defaults to that of the builder's host.</p>
   */
  public Container container() {
    Arguments.Builder builder = Arguments.newBuilder();
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("container", fieldArgs);
    return new Container(ctx);
  }

  /**
   * <p>The default platform of the builder.</p>
   */
  public Platform defaultPlatform() throws InterruptedException, ExecutionException,
      DaggerQueryException {
    QueryContext ctx = this.queryContext.chain("defaultPlatform");
    return ctx.executeQuery(Platform.class);
  }

  /**
   * <p>Load a directory by ID. No argument produces an empty directory.</p>
   */
  public Directory directory(DirectoryArguments optArgs) {
    Arguments.Builder builder = Arguments.newBuilder();
    Arguments fieldArgs = builder.build();
    fieldArgs = fieldArgs.merge(optArgs.toArguments());
    QueryContext ctx = this.queryContext.chain("directory", fieldArgs);
    return new Directory(ctx);
  }

  /**
   * <p>Load a directory by ID. No argument produces an empty directory.</p>
   */
  public Directory directory() {
    Arguments.Builder builder = Arguments.newBuilder();
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("directory", fieldArgs);
    return new Directory(ctx);
  }

  /**
   * <p>Loads a file by ID.</p>
   * @param id 
   */
  public File file(File id) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("id", id);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("file", fieldArgs);
    return new File(ctx);
  }

  /**
   * <p>Queries a git repository.</p>
   * @param url Url of the git repository.<br/>Can be formatted as https://{host}/{owner}/{repo}, git@{host}/{owner}/{repo}<br/>Suffix ".git" is optional.
   */
  public GitRepository git(String url, GitArguments optArgs) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("url", url);
    Arguments fieldArgs = builder.build();
    fieldArgs = fieldArgs.merge(optArgs.toArguments());
    QueryContext ctx = this.queryContext.chain("git", fieldArgs);
    return new GitRepository(ctx);
  }

  /**
   * <p>Queries a git repository.</p>
   * @param url Url of the git repository.<br/>Can be formatted as https://{host}/{owner}/{repo}, git@{host}/{owner}/{repo}<br/>Suffix ".git" is optional.
   */
  public GitRepository git(String url) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("url", url);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("git", fieldArgs);
    return new GitRepository(ctx);
  }

  /**
   * <p>Queries the host environment.</p>
   */
  public Host host() {
    QueryContext ctx = this.queryContext.chain("host");
    return new Host(ctx);
  }

  /**
   * <p>Returns a file containing an http remote url content.</p>
   * @param url HTTP url to get the content from (e.g., "https://docs.dagger.io").
   */
  public File http(String url, HttpArguments optArgs) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("url", url);
    Arguments fieldArgs = builder.build();
    fieldArgs = fieldArgs.merge(optArgs.toArguments());
    QueryContext ctx = this.queryContext.chain("http", fieldArgs);
    return new File(ctx);
  }

  /**
   * <p>Returns a file containing an http remote url content.</p>
   * @param url HTTP url to get the content from (e.g., "https://docs.dagger.io").
   */
  public File http(String url) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("url", url);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("http", fieldArgs);
    return new File(ctx);
  }

  /**
   * <p>Creates a named sub-pipeline.</p>
   * @param name Pipeline name.
   */
  public Client pipeline(String name, PipelineArguments optArgs) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("name", name);
    Arguments fieldArgs = builder.build();
    fieldArgs = fieldArgs.merge(optArgs.toArguments());
    QueryContext ctx = this.queryContext.chain("pipeline", fieldArgs);
    return new Client(ctx);
  }

  /**
   * <p>Creates a named sub-pipeline.</p>
   * @param name Pipeline name.
   */
  public Client pipeline(String name) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("name", name);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("pipeline", fieldArgs);
    return new Client(ctx);
  }

  /**
   * <p>Load a project from ID.</p>
   */
  public Project project(ProjectArguments optArgs) {
    Arguments.Builder builder = Arguments.newBuilder();
    Arguments fieldArgs = builder.build();
    fieldArgs = fieldArgs.merge(optArgs.toArguments());
    QueryContext ctx = this.queryContext.chain("project", fieldArgs);
    return new Project(ctx);
  }

  /**
   * <p>Load a project from ID.</p>
   */
  public Project project() {
    Arguments.Builder builder = Arguments.newBuilder();
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("project", fieldArgs);
    return new Project(ctx);
  }

  /**
   * <p>Load a project command from ID.</p>
   */
  public ProjectCommand projectCommand(ProjectCommandArguments optArgs) {
    Arguments.Builder builder = Arguments.newBuilder();
    Arguments fieldArgs = builder.build();
    fieldArgs = fieldArgs.merge(optArgs.toArguments());
    QueryContext ctx = this.queryContext.chain("projectCommand", fieldArgs);
    return new ProjectCommand(ctx);
  }

  /**
   * <p>Load a project command from ID.</p>
   */
  public ProjectCommand projectCommand() {
    Arguments.Builder builder = Arguments.newBuilder();
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("projectCommand", fieldArgs);
    return new ProjectCommand(ctx);
  }

  /**
   * <p>Loads a secret from its ID.</p>
   * @param id 
   */
  public Secret secret(Secret id) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("id", id);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("secret", fieldArgs);
    return new Secret(ctx);
  }

  /**
   * <p>Sets a secret given a user defined name to its plaintext and returns the secret.</p>
   * @param name The user defined name for this secret
   * @param plaintext The plaintext of the secret
   */
  public Secret setSecret(String name, String plaintext) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("name", name);
    builder.add("plaintext", plaintext);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("setSecret", fieldArgs);
    return new Secret(ctx);
  }

  /**
   * <p>Loads a socket by its ID.</p>
   */
  public Socket socket(SocketArguments optArgs) {
    Arguments.Builder builder = Arguments.newBuilder();
    Arguments fieldArgs = builder.build();
    fieldArgs = fieldArgs.merge(optArgs.toArguments());
    QueryContext ctx = this.queryContext.chain("socket", fieldArgs);
    return new Socket(ctx);
  }

  /**
   * <p>Loads a socket by its ID.</p>
   */
  public Socket socket() {
    Arguments.Builder builder = Arguments.newBuilder();
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("socket", fieldArgs);
    return new Socket(ctx);
  }

  public static class ContainerArguments {
    ContainerID id;

    Platform platform;

    private ContainerArguments() {
    }

    static ContainerArgumentsBuilder newBuilder() {
      ContainerArguments args = new ContainerArguments();
      return new ContainerArgumentsBuilder(args);
    }

    public ContainerID getId() {
      return this.id;
    }

    public Platform getPlatform() {
      return this.platform;
    }

    public Arguments toArguments() {
      Arguments.Builder builder = Arguments.newBuilder();
      builder.add("id", this.id);
      builder.add("platform", this.platform);
          return builder.build();
    }
  }

  public static class ContainerArgumentsBuilder {
    private ContainerArguments arguments;

    ContainerArgumentsBuilder(ContainerArguments arguments) {
      this.arguments = arguments;
    }

    public ContainerArgumentsBuilder withId(ContainerID id) {
      this.arguments.id = id;
      return this;
    }

    public ContainerArgumentsBuilder withPlatform(Platform platform) {
      this.arguments.platform = platform;
      return this;
    }

    public ContainerArguments build() {
      return this.arguments;
    }
  }

  public static class DirectoryArguments {
    DirectoryID id;

    private DirectoryArguments() {
    }

    static DirectoryArgumentsBuilder newBuilder() {
      DirectoryArguments args = new DirectoryArguments();
      return new DirectoryArgumentsBuilder(args);
    }

    public DirectoryID getId() {
      return this.id;
    }

    public Arguments toArguments() {
      Arguments.Builder builder = Arguments.newBuilder();
      builder.add("id", this.id);
          return builder.build();
    }
  }

  public static class DirectoryArgumentsBuilder {
    private DirectoryArguments arguments;

    DirectoryArgumentsBuilder(DirectoryArguments arguments) {
      this.arguments = arguments;
    }

    public DirectoryArgumentsBuilder withId(DirectoryID id) {
      this.arguments.id = id;
      return this;
    }

    public DirectoryArguments build() {
      return this.arguments;
    }
  }

  public static class GitArguments {
    Boolean keepGitDir;

    Container experimentalServiceHost;

    private GitArguments() {
    }

    static GitArgumentsBuilder newBuilder() {
      GitArguments args = new GitArguments();
      return new GitArgumentsBuilder(args);
    }

    public Boolean getKeepGitDir() {
      return this.keepGitDir;
    }

    public Container getExperimentalServiceHost() {
      return this.experimentalServiceHost;
    }

    public Arguments toArguments() {
      Arguments.Builder builder = Arguments.newBuilder();
      builder.add("keepGitDir", this.keepGitDir);
      builder.add("experimentalServiceHost", this.experimentalServiceHost);
          return builder.build();
    }
  }

  public static class GitArgumentsBuilder {
    private GitArguments arguments;

    GitArgumentsBuilder(GitArguments arguments) {
      this.arguments = arguments;
    }

    public GitArgumentsBuilder withKeepGitDir(Boolean keepGitDir) {
      this.arguments.keepGitDir = keepGitDir;
      return this;
    }

    public GitArgumentsBuilder withExperimentalServiceHost(Container experimentalServiceHost) {
      this.arguments.experimentalServiceHost = experimentalServiceHost;
      return this;
    }

    public GitArguments build() {
      return this.arguments;
    }
  }

  public static class HttpArguments {
    Container experimentalServiceHost;

    private HttpArguments() {
    }

    static HttpArgumentsBuilder newBuilder() {
      HttpArguments args = new HttpArguments();
      return new HttpArgumentsBuilder(args);
    }

    public Container getExperimentalServiceHost() {
      return this.experimentalServiceHost;
    }

    public Arguments toArguments() {
      Arguments.Builder builder = Arguments.newBuilder();
      builder.add("experimentalServiceHost", this.experimentalServiceHost);
          return builder.build();
    }
  }

  public static class HttpArgumentsBuilder {
    private HttpArguments arguments;

    HttpArgumentsBuilder(HttpArguments arguments) {
      this.arguments = arguments;
    }

    public HttpArgumentsBuilder withExperimentalServiceHost(Container experimentalServiceHost) {
      this.arguments.experimentalServiceHost = experimentalServiceHost;
      return this;
    }

    public HttpArguments build() {
      return this.arguments;
    }
  }

  public static class PipelineArguments {
    String description;

    List<PipelineLabel> labels;

    private PipelineArguments() {
    }

    static PipelineArgumentsBuilder newBuilder() {
      PipelineArguments args = new PipelineArguments();
      return new PipelineArgumentsBuilder(args);
    }

    public String getDescription() {
      return this.description;
    }

    public List<PipelineLabel> getLabels() {
      return this.labels;
    }

    public Arguments toArguments() {
      Arguments.Builder builder = Arguments.newBuilder();
      builder.add("description", this.description);
      builder.add("labels", this.labels);
          return builder.build();
    }
  }

  public static class PipelineArgumentsBuilder {
    private PipelineArguments arguments;

    PipelineArgumentsBuilder(PipelineArguments arguments) {
      this.arguments = arguments;
    }

    public PipelineArgumentsBuilder withDescription(String description) {
      this.arguments.description = description;
      return this;
    }

    public PipelineArgumentsBuilder withLabels(List<PipelineLabel> labels) {
      this.arguments.labels = labels;
      return this;
    }

    public PipelineArguments build() {
      return this.arguments;
    }
  }

  public static class ProjectArguments {
    ProjectID id;

    private ProjectArguments() {
    }

    static ProjectArgumentsBuilder newBuilder() {
      ProjectArguments args = new ProjectArguments();
      return new ProjectArgumentsBuilder(args);
    }

    public ProjectID getId() {
      return this.id;
    }

    public Arguments toArguments() {
      Arguments.Builder builder = Arguments.newBuilder();
      builder.add("id", this.id);
          return builder.build();
    }
  }

  public static class ProjectArgumentsBuilder {
    private ProjectArguments arguments;

    ProjectArgumentsBuilder(ProjectArguments arguments) {
      this.arguments = arguments;
    }

    public ProjectArgumentsBuilder withId(ProjectID id) {
      this.arguments.id = id;
      return this;
    }

    public ProjectArguments build() {
      return this.arguments;
    }
  }

  public static class ProjectCommandArguments {
    ProjectCommandID id;

    private ProjectCommandArguments() {
    }

    static ProjectCommandArgumentsBuilder newBuilder() {
      ProjectCommandArguments args = new ProjectCommandArguments();
      return new ProjectCommandArgumentsBuilder(args);
    }

    public ProjectCommandID getId() {
      return this.id;
    }

    public Arguments toArguments() {
      Arguments.Builder builder = Arguments.newBuilder();
      builder.add("id", this.id);
          return builder.build();
    }
  }

  public static class ProjectCommandArgumentsBuilder {
    private ProjectCommandArguments arguments;

    ProjectCommandArgumentsBuilder(ProjectCommandArguments arguments) {
      this.arguments = arguments;
    }

    public ProjectCommandArgumentsBuilder withId(ProjectCommandID id) {
      this.arguments.id = id;
      return this;
    }

    public ProjectCommandArguments build() {
      return this.arguments;
    }
  }

  public static class SocketArguments {
    SocketID id;

    private SocketArguments() {
    }

    static SocketArgumentsBuilder newBuilder() {
      SocketArguments args = new SocketArguments();
      return new SocketArgumentsBuilder(args);
    }

    public SocketID getId() {
      return this.id;
    }

    public Arguments toArguments() {
      Arguments.Builder builder = Arguments.newBuilder();
      builder.add("id", this.id);
          return builder.build();
    }
  }

  public static class SocketArgumentsBuilder {
    private SocketArguments arguments;

    SocketArgumentsBuilder(SocketArguments arguments) {
      this.arguments = arguments;
    }

    public SocketArgumentsBuilder withId(SocketID id) {
      this.arguments.id = id;
      return this;
    }

    public SocketArguments build() {
      return this.arguments;
    }
  }
}
