// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package org.chelonix.dagger.client;

import java.lang.InterruptedException;
import java.lang.String;
import java.util.List;
import java.util.concurrent.ExecutionException;

/**
 * A collection of Dagger resources that can be queried and invoked.
 */
public class Project implements IdProvider<String> {
  private QueryContext queryContext;

  private String id;

  private String name;

  /**
   * Empty constructor for JSON-B deserialization
   */
  protected Project() {
  }

  Project(QueryContext queryContext) {
    this.queryContext = queryContext;
  }

  /**
   * <p>Commands provided by this project</p>
   */
  public List<ProjectCommand> commands() throws InterruptedException, ExecutionException,
      DaggerQueryException {
    QueryContext ctx = this.queryContext.chain("commands");
    ctx = ctx.chain(List.of("description","id","name"));
    return ctx.executeListQuery(ProjectCommand.class);
  }

  /**
   * <p>A unique identifier for this project.</p>
   */
  public String id() throws InterruptedException, ExecutionException, DaggerQueryException {
    if (this.id != null) {
      return id;
    }
    QueryContext ctx = this.queryContext.chain("id");
    return ctx.executeQuery(String.class);
  }

  /**
   * <p>Initialize this project from the given directory and config path</p>
   * @param source 
   * @param configPath 
   */
  public Project load(Directory source, String configPath) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("source", source);
    builder.add("configPath", configPath);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("load", fieldArgs);
    return new Project(ctx);
  }

  /**
   * <p>Name of the project</p>
   */
  public String name() throws InterruptedException, ExecutionException, DaggerQueryException {
    if (this.name != null) {
      return name;
    }
    QueryContext ctx = this.queryContext.chain("name");
    return ctx.executeQuery(String.class);
  }
}
