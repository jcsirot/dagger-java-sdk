// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package org.chelonix.dagger.client;

import java.lang.InterruptedException;
import java.lang.String;
import java.util.List;
import java.util.concurrent.ExecutionException;

/**
 * A git repository.
 */
public class GitRepository {
  private QueryContext queryContext;

  /**
   * Empty constructor for JSON-B deserialization
   */
  protected GitRepository() {
  }

  GitRepository(QueryContext queryContext) {
    this.queryContext = queryContext;
  }

  /**
   * <p>Returns details on one branch.</p>
   * @param name Branch's name (e.g., "main").
   */
  public GitRef branch(String name) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("name", name);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("branch", fieldArgs);
    return new GitRef(ctx);
  }

  /**
   * <p>Lists of branches on the repository.</p>
   */
  public List<String> branches() throws InterruptedException, ExecutionException,
      DaggerQueryException {
    QueryContext ctx = this.queryContext.chain("branches");
    return ctx.executeListQuery(String.class);
  }

  /**
   * <p>Returns details on one commit.</p>
   * @param id Identifier of the commit (e.g., "b6315d8f2810962c601af73f86831f6866ea798b").
   */
  public GitRef commit(String id) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("id", id);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("commit", fieldArgs);
    return new GitRef(ctx);
  }

  /**
   * <p>Returns details on one tag.</p>
   * @param name Tag's name (e.g., "v0.3.9").
   */
  public GitRef tag(String name) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("name", name);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("tag", fieldArgs);
    return new GitRef(ctx);
  }

  /**
   * <p>Lists of tags on the repository.</p>
   */
  public List<String> tags() throws InterruptedException, ExecutionException, DaggerQueryException {
    QueryContext ctx = this.queryContext.chain("tags");
    return ctx.executeListQuery(String.class);
  }
}
