// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package org.chelonix.dagger.client;

import java.lang.Boolean;
import java.lang.Integer;
import java.lang.InterruptedException;
import java.lang.String;
import java.util.List;
import java.util.concurrent.ExecutionException;

/**
 * A directory.
 */
public class Directory implements IdProvider<DirectoryID> {
  private QueryContext queryContext;

  private Boolean export;

  private DirectoryID id;

  /**
   * Empty constructor for JSON-B deserialization
   */
  protected Directory() {
  }

  Directory(QueryContext queryContext) {
    this.queryContext = queryContext;
  }

  /**
   * <p>Gets the difference between this directory and an another directory.</p>
   * @param other Identifier of the directory to compare.
   */
  public Directory diff(Directory other) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("other", other);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("diff", fieldArgs);
    return new Directory(ctx);
  }

  /**
   * <p>Retrieves a directory at the given path.</p>
   * @param path Location of the directory to retrieve (e.g., "/src").
   */
  public Directory directory(String path) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("path", path);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("directory", fieldArgs);
    return new Directory(ctx);
  }

  /**
   * <p>Builds a new Docker container from this directory.</p>
   */
  public Container dockerBuild(DockerBuildArguments optArgs) {
    Arguments.Builder builder = Arguments.newBuilder();
    Arguments fieldArgs = builder.build();
    fieldArgs = fieldArgs.merge(optArgs.toArguments());
    QueryContext ctx = this.queryContext.chain("dockerBuild", fieldArgs);
    return new Container(ctx);
  }

  /**
   * <p>Builds a new Docker container from this directory.</p>
   */
  public Container dockerBuild() {
    Arguments.Builder builder = Arguments.newBuilder();
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("dockerBuild", fieldArgs);
    return new Container(ctx);
  }

  /**
   * <p>Returns a list of files and directories at the given path.</p>
   */
  public List<String> entries(EntriesArguments optArgs) throws InterruptedException,
      ExecutionException, DaggerQueryException {
    Arguments.Builder builder = Arguments.newBuilder();
    Arguments fieldArgs = builder.build();
    fieldArgs = fieldArgs.merge(optArgs.toArguments());
    QueryContext ctx = this.queryContext.chain("entries", fieldArgs);
    return ctx.executeListQuery(String.class);
  }

  /**
   * <p>Returns a list of files and directories at the given path.</p>
   */
  public List<String> entries() throws InterruptedException, ExecutionException,
      DaggerQueryException {
    Arguments.Builder builder = Arguments.newBuilder();
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("entries", fieldArgs);
    return ctx.executeListQuery(String.class);
  }

  /**
   * <p>Writes the contents of the directory to a path on the host.</p>
   * @param path Location of the copied directory (e.g., "logs/").
   */
  public Boolean export(String path) throws InterruptedException, ExecutionException,
      DaggerQueryException {
    if (this.export != null) {
      return export;
    }
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("path", path);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("export", fieldArgs);
    return ctx.executeQuery(Boolean.class);
  }

  /**
   * <p>Retrieves a file at the given path.</p>
   * @param path Location of the file to retrieve (e.g., "README.md").
   */
  public File file(String path) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("path", path);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("file", fieldArgs);
    return new File(ctx);
  }

  /**
   * <p>The content-addressed identifier of the directory.</p>
   */
  public DirectoryID id() throws InterruptedException, ExecutionException, DaggerQueryException {
    if (this.id != null) {
      return id;
    }
    QueryContext ctx = this.queryContext.chain("id");
    return ctx.executeQuery(DirectoryID.class);
  }

  /**
   * <p>Creates a named sub-pipeline</p>
   * @param name Pipeline name.
   */
  public Directory pipeline(String name, PipelineArguments optArgs) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("name", name);
    Arguments fieldArgs = builder.build();
    fieldArgs = fieldArgs.merge(optArgs.toArguments());
    QueryContext ctx = this.queryContext.chain("pipeline", fieldArgs);
    return new Directory(ctx);
  }

  /**
   * <p>Creates a named sub-pipeline</p>
   * @param name Pipeline name.
   */
  public Directory pipeline(String name) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("name", name);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("pipeline", fieldArgs);
    return new Directory(ctx);
  }

  /**
   * <p>Retrieves this directory plus a directory written at the given path.</p>
   * @param path Location of the written directory (e.g., "/src/").
   * @param directory Identifier of the directory to copy.
   */
  public Directory withDirectory(String path, Directory directory, WithDirectoryArguments optArgs) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("path", path);
    builder.add("directory", directory);
    Arguments fieldArgs = builder.build();
    fieldArgs = fieldArgs.merge(optArgs.toArguments());
    QueryContext ctx = this.queryContext.chain("withDirectory", fieldArgs);
    return new Directory(ctx);
  }

  /**
   * <p>Retrieves this directory plus a directory written at the given path.</p>
   * @param path Location of the written directory (e.g., "/src/").
   * @param directory Identifier of the directory to copy.
   */
  public Directory withDirectory(String path, Directory directory) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("path", path);
    builder.add("directory", directory);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("withDirectory", fieldArgs);
    return new Directory(ctx);
  }

  /**
   * <p>Retrieves this directory plus the contents of the given file copied to the given path.</p>
   * @param path Location of the copied file (e.g., "/file.txt").
   * @param source Identifier of the file to copy.
   */
  public Directory withFile(String path, File source, WithFileArguments optArgs) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("path", path);
    builder.add("source", source);
    Arguments fieldArgs = builder.build();
    fieldArgs = fieldArgs.merge(optArgs.toArguments());
    QueryContext ctx = this.queryContext.chain("withFile", fieldArgs);
    return new Directory(ctx);
  }

  /**
   * <p>Retrieves this directory plus the contents of the given file copied to the given path.</p>
   * @param path Location of the copied file (e.g., "/file.txt").
   * @param source Identifier of the file to copy.
   */
  public Directory withFile(String path, File source) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("path", path);
    builder.add("source", source);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("withFile", fieldArgs);
    return new Directory(ctx);
  }

  /**
   * <p>Retrieves this directory plus a new directory created at the given path.</p>
   * @param path Location of the directory created (e.g., "/logs").
   */
  public Directory withNewDirectory(String path, WithNewDirectoryArguments optArgs) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("path", path);
    Arguments fieldArgs = builder.build();
    fieldArgs = fieldArgs.merge(optArgs.toArguments());
    QueryContext ctx = this.queryContext.chain("withNewDirectory", fieldArgs);
    return new Directory(ctx);
  }

  /**
   * <p>Retrieves this directory plus a new directory created at the given path.</p>
   * @param path Location of the directory created (e.g., "/logs").
   */
  public Directory withNewDirectory(String path) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("path", path);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("withNewDirectory", fieldArgs);
    return new Directory(ctx);
  }

  /**
   * <p>Retrieves this directory plus a new file written at the given path.</p>
   * @param path Location of the written file (e.g., "/file.txt").
   * @param contents Content of the written file (e.g., "Hello world!").
   */
  public Directory withNewFile(String path, String contents, WithNewFileArguments optArgs) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("path", path);
    builder.add("contents", contents);
    Arguments fieldArgs = builder.build();
    fieldArgs = fieldArgs.merge(optArgs.toArguments());
    QueryContext ctx = this.queryContext.chain("withNewFile", fieldArgs);
    return new Directory(ctx);
  }

  /**
   * <p>Retrieves this directory plus a new file written at the given path.</p>
   * @param path Location of the written file (e.g., "/file.txt").
   * @param contents Content of the written file (e.g., "Hello world!").
   */
  public Directory withNewFile(String path, String contents) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("path", path);
    builder.add("contents", contents);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("withNewFile", fieldArgs);
    return new Directory(ctx);
  }

  /**
   * <p>Retrieves this directory with all file/dir timestamps set to the given time.</p>
   * @param timestamp Timestamp to set dir/files in.<br/><br/>Formatted in seconds following Unix epoch (e.g., 1672531199).
   */
  public Directory withTimestamps(Integer timestamp) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("timestamp", timestamp);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("withTimestamps", fieldArgs);
    return new Directory(ctx);
  }

  /**
   * <p>Retrieves this directory with the directory at the given path removed.</p>
   * @param path Location of the directory to remove (e.g., ".github/").
   */
  public Directory withoutDirectory(String path) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("path", path);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("withoutDirectory", fieldArgs);
    return new Directory(ctx);
  }

  /**
   * <p>Retrieves this directory with the file at the given path removed.</p>
   * @param path Location of the file to remove (e.g., "/file.txt").
   */
  public Directory withoutFile(String path) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("path", path);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("withoutFile", fieldArgs);
    return new Directory(ctx);
  }

  public static class DockerBuildArguments {
    String dockerfile;

    Platform platform;

    List<BuildArg> buildArgs;

    String target;

    List<Secret> secrets;

    private DockerBuildArguments() {
    }

    static DockerBuildArgumentsBuilder newBuilder() {
      DockerBuildArguments args = new DockerBuildArguments();
      return new DockerBuildArgumentsBuilder(args);
    }

    public String getDockerfile() {
      return this.dockerfile;
    }

    public Platform getPlatform() {
      return this.platform;
    }

    public List<BuildArg> getBuildArgs() {
      return this.buildArgs;
    }

    public String getTarget() {
      return this.target;
    }

    public List<Secret> getSecrets() {
      return this.secrets;
    }

    public Arguments toArguments() {
      Arguments.Builder builder = Arguments.newBuilder();
      builder.add("dockerfile", this.dockerfile);
      builder.add("platform", this.platform);
      builder.add("buildArgs", this.buildArgs);
      builder.add("target", this.target);
      builder.add("secrets", this.secrets);
          return builder.build();
    }
  }

  public static class DockerBuildArgumentsBuilder {
    private DockerBuildArguments arguments;

    DockerBuildArgumentsBuilder(DockerBuildArguments arguments) {
      this.arguments = arguments;
    }

    public DockerBuildArgumentsBuilder withDockerfile(String dockerfile) {
      this.arguments.dockerfile = dockerfile;
      return this;
    }

    public DockerBuildArgumentsBuilder withPlatform(Platform platform) {
      this.arguments.platform = platform;
      return this;
    }

    public DockerBuildArgumentsBuilder withBuildArgs(List<BuildArg> buildArgs) {
      this.arguments.buildArgs = buildArgs;
      return this;
    }

    public DockerBuildArgumentsBuilder withTarget(String target) {
      this.arguments.target = target;
      return this;
    }

    public DockerBuildArgumentsBuilder withSecrets(List<Secret> secrets) {
      this.arguments.secrets = secrets;
      return this;
    }

    public DockerBuildArguments build() {
      return this.arguments;
    }
  }

  public static class EntriesArguments {
    String path;

    private EntriesArguments() {
    }

    static EntriesArgumentsBuilder newBuilder() {
      EntriesArguments args = new EntriesArguments();
      return new EntriesArgumentsBuilder(args);
    }

    public String getPath() {
      return this.path;
    }

    public Arguments toArguments() {
      Arguments.Builder builder = Arguments.newBuilder();
      builder.add("path", this.path);
          return builder.build();
    }
  }

  public static class EntriesArgumentsBuilder {
    private EntriesArguments arguments;

    EntriesArgumentsBuilder(EntriesArguments arguments) {
      this.arguments = arguments;
    }

    public EntriesArgumentsBuilder withPath(String path) {
      this.arguments.path = path;
      return this;
    }

    public EntriesArguments build() {
      return this.arguments;
    }
  }

  public static class PipelineArguments {
    String description;

    List<PipelineLabel> labels;

    private PipelineArguments() {
    }

    static PipelineArgumentsBuilder newBuilder() {
      PipelineArguments args = new PipelineArguments();
      return new PipelineArgumentsBuilder(args);
    }

    public String getDescription() {
      return this.description;
    }

    public List<PipelineLabel> getLabels() {
      return this.labels;
    }

    public Arguments toArguments() {
      Arguments.Builder builder = Arguments.newBuilder();
      builder.add("description", this.description);
      builder.add("labels", this.labels);
          return builder.build();
    }
  }

  public static class PipelineArgumentsBuilder {
    private PipelineArguments arguments;

    PipelineArgumentsBuilder(PipelineArguments arguments) {
      this.arguments = arguments;
    }

    public PipelineArgumentsBuilder withDescription(String description) {
      this.arguments.description = description;
      return this;
    }

    public PipelineArgumentsBuilder withLabels(List<PipelineLabel> labels) {
      this.arguments.labels = labels;
      return this;
    }

    public PipelineArguments build() {
      return this.arguments;
    }
  }

  public static class WithDirectoryArguments {
    List<String> exclude;

    List<String> include;

    private WithDirectoryArguments() {
    }

    static WithDirectoryArgumentsBuilder newBuilder() {
      WithDirectoryArguments args = new WithDirectoryArguments();
      return new WithDirectoryArgumentsBuilder(args);
    }

    public List<String> getExclude() {
      return this.exclude;
    }

    public List<String> getInclude() {
      return this.include;
    }

    public Arguments toArguments() {
      Arguments.Builder builder = Arguments.newBuilder();
      builder.add("exclude", this.exclude);
      builder.add("include", this.include);
          return builder.build();
    }
  }

  public static class WithDirectoryArgumentsBuilder {
    private WithDirectoryArguments arguments;

    WithDirectoryArgumentsBuilder(WithDirectoryArguments arguments) {
      this.arguments = arguments;
    }

    public WithDirectoryArgumentsBuilder withExclude(List<String> exclude) {
      this.arguments.exclude = exclude;
      return this;
    }

    public WithDirectoryArgumentsBuilder withInclude(List<String> include) {
      this.arguments.include = include;
      return this;
    }

    public WithDirectoryArguments build() {
      return this.arguments;
    }
  }

  public static class WithFileArguments {
    Integer permissions;

    private WithFileArguments() {
    }

    static WithFileArgumentsBuilder newBuilder() {
      WithFileArguments args = new WithFileArguments();
      return new WithFileArgumentsBuilder(args);
    }

    public Integer getPermissions() {
      return this.permissions;
    }

    public Arguments toArguments() {
      Arguments.Builder builder = Arguments.newBuilder();
      builder.add("permissions", this.permissions);
          return builder.build();
    }
  }

  public static class WithFileArgumentsBuilder {
    private WithFileArguments arguments;

    WithFileArgumentsBuilder(WithFileArguments arguments) {
      this.arguments = arguments;
    }

    public WithFileArgumentsBuilder withPermissions(Integer permissions) {
      this.arguments.permissions = permissions;
      return this;
    }

    public WithFileArguments build() {
      return this.arguments;
    }
  }

  public static class WithNewDirectoryArguments {
    Integer permissions;

    private WithNewDirectoryArguments() {
    }

    static WithNewDirectoryArgumentsBuilder newBuilder() {
      WithNewDirectoryArguments args = new WithNewDirectoryArguments();
      return new WithNewDirectoryArgumentsBuilder(args);
    }

    public Integer getPermissions() {
      return this.permissions;
    }

    public Arguments toArguments() {
      Arguments.Builder builder = Arguments.newBuilder();
      builder.add("permissions", this.permissions);
          return builder.build();
    }
  }

  public static class WithNewDirectoryArgumentsBuilder {
    private WithNewDirectoryArguments arguments;

    WithNewDirectoryArgumentsBuilder(WithNewDirectoryArguments arguments) {
      this.arguments = arguments;
    }

    public WithNewDirectoryArgumentsBuilder withPermissions(Integer permissions) {
      this.arguments.permissions = permissions;
      return this;
    }

    public WithNewDirectoryArguments build() {
      return this.arguments;
    }
  }

  public static class WithNewFileArguments {
    Integer permissions;

    private WithNewFileArguments() {
    }

    static WithNewFileArgumentsBuilder newBuilder() {
      WithNewFileArguments args = new WithNewFileArguments();
      return new WithNewFileArgumentsBuilder(args);
    }

    public Integer getPermissions() {
      return this.permissions;
    }

    public Arguments toArguments() {
      Arguments.Builder builder = Arguments.newBuilder();
      builder.add("permissions", this.permissions);
          return builder.build();
    }
  }

  public static class WithNewFileArgumentsBuilder {
    private WithNewFileArguments arguments;

    WithNewFileArgumentsBuilder(WithNewFileArguments arguments) {
      this.arguments = arguments;
    }

    public WithNewFileArgumentsBuilder withPermissions(Integer permissions) {
      this.arguments.permissions = permissions;
      return this;
    }

    public WithNewFileArguments build() {
      return this.arguments;
    }
  }
}
