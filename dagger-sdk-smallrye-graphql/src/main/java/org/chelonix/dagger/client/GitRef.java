// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package org.chelonix.dagger.client;

import java.lang.InterruptedException;
import java.lang.String;
import java.util.concurrent.ExecutionException;

/**
 * A git ref (tag, branch or commit).
 */
public class GitRef {
  private QueryContext queryContext;

  private String digest;

  /**
   * Empty constructor for JSON-B deserialization
   */
  protected GitRef() {
  }

  GitRef(QueryContext queryContext) {
    this.queryContext = queryContext;
  }

  /**
   * <p>The digest of the current value of this ref.</p>
   */
  public String digest() throws InterruptedException, ExecutionException, DaggerQueryException {
    if (this.digest != null) {
      return digest;
    }
    QueryContext ctx = this.queryContext.chain("digest");
    return ctx.executeQuery(String.class);
  }

  /**
   * <p>The filesystem tree at this ref.</p>
   */
  public Directory tree(TreeArguments optArgs) {
    Arguments.Builder builder = Arguments.newBuilder();
    Arguments fieldArgs = builder.build();
    fieldArgs = fieldArgs.merge(optArgs.toArguments());
    QueryContext ctx = this.queryContext.chain("tree", fieldArgs);
    return new Directory(ctx);
  }

  /**
   * <p>The filesystem tree at this ref.</p>
   */
  public Directory tree() {
    Arguments.Builder builder = Arguments.newBuilder();
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("tree", fieldArgs);
    return new Directory(ctx);
  }

  public static class TreeArguments {
    String sshKnownHosts;

    Socket sshAuthSocket;

    private TreeArguments() {
    }

    static TreeArgumentsBuilder newBuilder() {
      TreeArguments args = new TreeArguments();
      return new TreeArgumentsBuilder(args);
    }

    public String getSshKnownHosts() {
      return this.sshKnownHosts;
    }

    public Socket getSshAuthSocket() {
      return this.sshAuthSocket;
    }

    public Arguments toArguments() {
      Arguments.Builder builder = Arguments.newBuilder();
      builder.add("sshKnownHosts", this.sshKnownHosts);
      builder.add("sshAuthSocket", this.sshAuthSocket);
          return builder.build();
    }
  }

  public static class TreeArgumentsBuilder {
    private TreeArguments arguments;

    TreeArgumentsBuilder(TreeArguments arguments) {
      this.arguments = arguments;
    }

    public TreeArgumentsBuilder withSshKnownHosts(String sshKnownHosts) {
      this.arguments.sshKnownHosts = sshKnownHosts;
      return this;
    }

    public TreeArgumentsBuilder withSshAuthSocket(Socket sshAuthSocket) {
      this.arguments.sshAuthSocket = sshAuthSocket;
      return this;
    }

    public TreeArguments build() {
      return this.arguments;
    }
  }
}
