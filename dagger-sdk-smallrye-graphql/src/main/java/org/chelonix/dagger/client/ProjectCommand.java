// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package org.chelonix.dagger.client;

import java.lang.InterruptedException;
import java.lang.String;
import java.util.List;
import java.util.concurrent.ExecutionException;

/**
 * A command defined in a project that can be invoked from the CLI.
 */
public class ProjectCommand implements IdProvider<String> {
  private QueryContext queryContext;

  private String description;

  private String id;

  private String name;

  /**
   * Empty constructor for JSON-B deserialization
   */
  protected ProjectCommand() {
  }

  ProjectCommand(QueryContext queryContext) {
    this.queryContext = queryContext;
  }

  /**
   * <p>Documentation for what this command does.</p>
   */
  public String description() throws InterruptedException, ExecutionException,
      DaggerQueryException {
    if (this.description != null) {
      return description;
    }
    QueryContext ctx = this.queryContext.chain("description");
    return ctx.executeQuery(String.class);
  }

  /**
   * <p>Flags accepted by this command.</p>
   */
  public List<ProjectCommandFlag> flags() throws InterruptedException, ExecutionException,
      DaggerQueryException {
    QueryContext ctx = this.queryContext.chain("flags");
    ctx = ctx.chain(List.of("description","name"));
    return ctx.executeListQuery(ProjectCommandFlag.class);
  }

  /**
   * <p>A unique identifier for this command.</p>
   */
  public String id() throws InterruptedException, ExecutionException, DaggerQueryException {
    if (this.id != null) {
      return id;
    }
    QueryContext ctx = this.queryContext.chain("id");
    return ctx.executeQuery(String.class);
  }

  /**
   * <p>The name of the command.</p>
   */
  public String name() throws InterruptedException, ExecutionException, DaggerQueryException {
    if (this.name != null) {
      return name;
    }
    QueryContext ctx = this.queryContext.chain("name");
    return ctx.executeQuery(String.class);
  }

  /**
   * <p>Subcommands, if any, that this command provides.</p>
   */
  public List<ProjectCommand> subcommands() throws InterruptedException, ExecutionException,
      DaggerQueryException {
    QueryContext ctx = this.queryContext.chain("subcommands");
    ctx = ctx.chain(List.of("description","id","name"));
    return ctx.executeListQuery(ProjectCommand.class);
  }
}
