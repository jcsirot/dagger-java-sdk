// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package org.chelonix.dagger.client;

import java.lang.String;
import java.util.List;

/**
 * Information about the host execution environment.
 */
public class Host {
  private QueryContext queryContext;

  /**
   * Empty constructor for JSON-B deserialization
   */
  protected Host() {
  }

  Host(QueryContext queryContext) {
    this.queryContext = queryContext;
  }

  /**
   * <p>Accesses a directory on the host.</p>
   * @param path Location of the directory to access (e.g., ".").
   */
  public Directory directory(String path, DirectoryArguments optArgs) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("path", path);
    Arguments fieldArgs = builder.build();
    fieldArgs = fieldArgs.merge(optArgs.toArguments());
    QueryContext ctx = this.queryContext.chain("directory", fieldArgs);
    return new Directory(ctx);
  }

  /**
   * <p>Accesses a directory on the host.</p>
   * @param path Location of the directory to access (e.g., ".").
   */
  public Directory directory(String path) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("path", path);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("directory", fieldArgs);
    return new Directory(ctx);
  }

  /**
   * <p>Accesses an environment variable on the host.</p>
   * @param name Name of the environment variable (e.g., "PATH").
   */
  public HostVariable envVariable(String name) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("name", name);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("envVariable", fieldArgs);
    return new HostVariable(ctx);
  }

  /**
   * <p>Accesses a Unix socket on the host.</p>
   * @param path Location of the Unix socket (e.g., "/var/run/docker.sock").
   */
  public Socket unixSocket(String path) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("path", path);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("unixSocket", fieldArgs);
    return new Socket(ctx);
  }

  /**
   * <p>Retrieves the current working directory on the host.</p>
   */
  public Directory workdir(WorkdirArguments optArgs) {
    Arguments.Builder builder = Arguments.newBuilder();
    Arguments fieldArgs = builder.build();
    fieldArgs = fieldArgs.merge(optArgs.toArguments());
    QueryContext ctx = this.queryContext.chain("workdir", fieldArgs);
    return new Directory(ctx);
  }

  /**
   * <p>Retrieves the current working directory on the host.</p>
   */
  public Directory workdir() {
    Arguments.Builder builder = Arguments.newBuilder();
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("workdir", fieldArgs);
    return new Directory(ctx);
  }

  public static class DirectoryArguments {
    List<String> exclude;

    List<String> include;

    private DirectoryArguments() {
    }

    static DirectoryArgumentsBuilder newBuilder() {
      DirectoryArguments args = new DirectoryArguments();
      return new DirectoryArgumentsBuilder(args);
    }

    public List<String> getExclude() {
      return this.exclude;
    }

    public List<String> getInclude() {
      return this.include;
    }

    public Arguments toArguments() {
      Arguments.Builder builder = Arguments.newBuilder();
      builder.add("exclude", this.exclude);
      builder.add("include", this.include);
          return builder.build();
    }
  }

  public static class DirectoryArgumentsBuilder {
    private DirectoryArguments arguments;

    DirectoryArgumentsBuilder(DirectoryArguments arguments) {
      this.arguments = arguments;
    }

    public DirectoryArgumentsBuilder withExclude(List<String> exclude) {
      this.arguments.exclude = exclude;
      return this;
    }

    public DirectoryArgumentsBuilder withInclude(List<String> include) {
      this.arguments.include = include;
      return this;
    }

    public DirectoryArguments build() {
      return this.arguments;
    }
  }

  public static class WorkdirArguments {
    List<String> exclude;

    List<String> include;

    private WorkdirArguments() {
    }

    static WorkdirArgumentsBuilder newBuilder() {
      WorkdirArguments args = new WorkdirArguments();
      return new WorkdirArgumentsBuilder(args);
    }

    public List<String> getExclude() {
      return this.exclude;
    }

    public List<String> getInclude() {
      return this.include;
    }

    public Arguments toArguments() {
      Arguments.Builder builder = Arguments.newBuilder();
      builder.add("exclude", this.exclude);
      builder.add("include", this.include);
          return builder.build();
    }
  }

  public static class WorkdirArgumentsBuilder {
    private WorkdirArguments arguments;

    WorkdirArgumentsBuilder(WorkdirArguments arguments) {
      this.arguments = arguments;
    }

    public WorkdirArgumentsBuilder withExclude(List<String> exclude) {
      this.arguments.exclude = exclude;
      return this;
    }

    public WorkdirArgumentsBuilder withInclude(List<String> include) {
      this.arguments.include = include;
      return this;
    }

    public WorkdirArguments build() {
      return this.arguments;
    }
  }
}
