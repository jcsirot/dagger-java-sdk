// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package org.chelonix.dagger.client;

import java.lang.Boolean;
import java.lang.Integer;
import java.lang.InterruptedException;
import java.lang.String;
import java.util.concurrent.ExecutionException;

/**
 * A file.
 */
public class File implements IdProvider<FileID> {
  private QueryContext queryContext;

  private String contents;

  private Boolean export;

  private FileID id;

  private Integer size;

  /**
   * Empty constructor for JSON-B deserialization
   */
  protected File() {
  }

  File(QueryContext queryContext) {
    this.queryContext = queryContext;
  }

  /**
   * <p>Retrieves the contents of the file.</p>
   */
  public String contents() throws InterruptedException, ExecutionException, DaggerQueryException {
    if (this.contents != null) {
      return contents;
    }
    QueryContext ctx = this.queryContext.chain("contents");
    return ctx.executeQuery(String.class);
  }

  /**
   * <p>Writes the file to a file path on the host.</p>
   * @param path Location of the written directory (e.g., "output.txt").
   */
  public Boolean export(String path) throws InterruptedException, ExecutionException,
      DaggerQueryException {
    if (this.export != null) {
      return export;
    }
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("path", path);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("export", fieldArgs);
    return ctx.executeQuery(Boolean.class);
  }

  /**
   * <p>Retrieves the content-addressed identifier of the file.</p>
   */
  public FileID id() throws InterruptedException, ExecutionException, DaggerQueryException {
    if (this.id != null) {
      return id;
    }
    QueryContext ctx = this.queryContext.chain("id");
    return ctx.executeQuery(FileID.class);
  }

  /**
   * <p>Retrieves a secret referencing the contents of this file.</p>
   */
  public Secret secret() {
    QueryContext ctx = this.queryContext.chain("secret");
    return new Secret(ctx);
  }

  /**
   * <p>Gets the size of the file, in bytes.</p>
   */
  public Integer size() throws InterruptedException, ExecutionException, DaggerQueryException {
    if (this.size != null) {
      return size;
    }
    QueryContext ctx = this.queryContext.chain("size");
    return ctx.executeQuery(Integer.class);
  }

  /**
   * <p>Retrieves this file with its created/modified timestamps set to the given time.</p>
   * @param timestamp Timestamp to set dir/files in.<br/><br/>Formatted in seconds following Unix epoch (e.g., 1672531199).
   */
  public File withTimestamps(Integer timestamp) {
    Arguments.Builder builder = Arguments.newBuilder();
    builder.add("timestamp", timestamp);
    Arguments fieldArgs = builder.build();
    QueryContext ctx = this.queryContext.chain("withTimestamps", fieldArgs);
    return new File(ctx);
  }
}
